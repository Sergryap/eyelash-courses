import asyncio
import random
import aiohttp
import json
import re

from django.conf import settings
from asgiref.sync import sync_to_async
from vkwave.bots import SimpleBotEvent
from vkwave.bots.storage.types import Key
from vkwave.bots.storage.storages import Storage
from courses.models import Client, Course, Program, CourseClient
from vkwave.bots.utils.keyboards.keyboard import Keyboard, ButtonColor
from django.utils import timezone
from more_itertools import chunked
from .vk_lib import (
    BUTTONS_START,
    get_course_msg,
    get_button_menu,
    get_button_course_menu,
    entry_user_to_course,
    check_phone_button,
    save_image_vk_id
)
from textwrap import dedent

storage = Storage()


async def handle_users_reply(event: SimpleBotEvent):
    """–ì–ª–∞–≤–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

    user_id = event.user_id
    api = event.api_ctx
    states_functions = {
        'START': start,
        'MAIN_MENU': main_menu_handler,
        'COURSE': handle_course_info,
        'PHONE': enter_phone,
    }

    if not await storage.contains(Key(f'{user_id}_first_name')):
        user_data = (await api.users.get(user_ids=user_id)).response[0]
        await storage.put(Key(f'{user_id}_first_name'), user_data.first_name)
        await storage.put(Key(f'{user_id}_last_name'), user_data.last_name)

    user, _ = await Client.objects.async_get_or_create(
        vk_id=user_id,
        defaults={
            'first_name': await storage.get(Key(f'{user_id}_first_name')),
            'last_name': await storage.get(Key(f'{user_id}_last_name')),
            'vk_profile': f'https://vk.com/id{user_id}',
        }
    )

    if (event.text.lower().strip() in ['start', '/start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']
            or event.payload and event.payload.get('button') == 'start'):
        user_state = 'START'
        await event.answer(message='–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=await get_button_menu(inline=False))
    else:
        user_state = user.bot_state

    state_handler = states_functions[user_state]
    user.bot_state = await state_handler(event)
    user.phone_number = await storage.get(Key(f'{user_id}_phone'), user.phone_number)
    await sync_to_async(user.save)()


async def start(event: SimpleBotEvent):
    user_id = event.user_id
    user_info = {
        'first_name': await storage.get(Key(f'{user_id}_first_name')),
        'last_name': await storage.get(Key(f'{user_id}_last_name'))
    }
    msg = f'{user_info["first_name"]}, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏:'
    keyboard = Keyboard(one_time=False, inline=True)
    buttons = BUTTONS_START
    for i, (btn, payload) in await sync_to_async(enumerate)(buttons, start=1):
        keyboard.add_text_button(
            btn,
            ButtonColor.PRIMARY,
            payload={'button': payload}
        )
        if i != len(buttons):
            keyboard.add_row()
    await event.answer(message=msg, keyboard=keyboard.get_keyboard())

    return 'MAIN_MENU'


async def main_menu_handler(event: SimpleBotEvent):
    user_id = event.user_id
    api = event.api_ctx
    user_instance = await Client.objects.async_get(vk_id=user_id)
    user_info = {
        'first_name': await storage.get(Key(f'{user_id}_first_name')),
        'last_name': await storage.get(Key(f'{user_id}_last_name'))
    }
    if event.payload:
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if event.payload.get('button') == 'client_courses':
            client_courses = await sync_to_async(user_instance.courses.all)()
            i = 0
            for client_courses_part in await sync_to_async(chunked)(client_courses, 5):
                i += 1
                if i == 1:
                    successful_msg = '–ö—É—Ä—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∏–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏:'
                else:
                    successful_msg = '–ï—â–µ –≤–∞—à–∏ –∫—É—Ä—Å—ã'
                keyboard = await get_course_msg(client_courses_part, back='client_courses')
                await event.answer(message=successful_msg, keyboard=keyboard)
            if i == 0:
                keyboard = Keyboard(one_time=False, inline=True)
                keyboard.add_text_button('‚ò∞ MENU', ButtonColor.SECONDARY, payload={'button': 'start'})
                await event.answer(message='–í—ã –µ—à–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫—É—Ä—Å:', keyboard=keyboard.get_keyboard())
            return 'COURSE'

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∫—É—Ä—Å–æ–≤
        elif event.payload.get('button') == 'future_courses':
            future_courses = await Course.objects.async_filter(scheduled_at__gt=timezone.now(), published_in_bot=True)
            if not future_courses:
                keyboard = Keyboard(one_time=False, inline=True)
                keyboard.add_text_button('‚ò∞ MENU', ButtonColor.SECONDARY, payload={'button': 'start'})
                await event.answer(message='–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:', keyboard=keyboard.get_keyboard())
                return 'COURSE'
            for i, future_courses_part in await sync_to_async(enumerate)(chunked(future_courses, 5), start=1):
                if i == 1:
                    successful_msg = '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∫—É—Ä—Å—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
                else:
                    successful_msg = '–ï—â–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∫—É—Ä—Å—ã:'
                keyboard = await get_course_msg(future_courses_part, back='future_courses')
                await event.answer(message=successful_msg, keyboard=keyboard)
            return 'COURSE'

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∫—É—Ä—Å–æ–≤
        elif event.payload.get('button') == 'past_courses':
            past_courses = await Course.objects.async_filter(scheduled_at__lte=timezone.now(), published_in_bot=True)
            if not past_courses:
                keyboard = Keyboard(one_time=False, inline=True)
                keyboard.add_text_button('‚ò∞ MENU', ButtonColor.SECONDARY, payload={'button': 'start'})
                await event.answer(message='–ï—à–µ –Ω–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö –∫—É—Ä—Å–æ–≤:', keyboard=keyboard.get_keyboard())
                return 'COURSE'
            for i, past_courses_part in await sync_to_async(enumerate)(chunked(past_courses, 5), start=1):
                if i == 1:
                    successful_msg = '–ü—Ä–æ—à–µ–¥—à–∏–µ –∫—É—Ä—Å—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
                else:
                    successful_msg = '–ï—â–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –∫—É—Ä—Å—ã:'
                keyboard = await get_course_msg(past_courses_part, back='past_courses')
                await event.answer(message=successful_msg, keyboard=keyboard)
            return 'COURSE'

        elif event.payload.get('button') == 'admin_msg':
            user_msg = f'{user_info["first_name"]}, –≤–≤–µ–¥–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:'
            await event.answer(message=user_msg)
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        elif event.payload.get('button') == 'search_us':
            text = f'''
                 {user_info['first_name']}, –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:
                 üìç –≥.–ü–µ—Ä–º—å, —É–ª. –¢—É—Ä–≥–µ–Ω–µ–≤–∞, –¥. 23.
                 
                 –≠—Ç–æ –º–∞–ª–æ—ç—Ç–∞–∂–Ω–æ–µ –∫–∏—Ä–ø–∏—á–Ω–æ–µ –∑–¥–∞–Ω–∏–µ —Å–ª–µ–≤–∞ –æ—Ç –¢–¶ "–ê–≥–∞—Ç" 
                 –í—Ö–æ–¥ —á–µ—Ä–µ–∑ "–ò–¥–µ–∞–ª-–õ–∏–∫", –±–æ–ª—å—à–æ–π —Å—Ç–µ–∫–ª—è–Ω–Ω—ã–π —Ç–∞–º–±—É—Ä.
                 '''
            await api.messages.send(
                user_id=user_id,
                random_id=random.randint(0, 1000),
                message=dedent(text),
                lat=settings.OFFICE_LAT,
                long=settings.OFFICE_LONG
            )
            await event.answer(
                message='–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
                keyboard=await get_button_menu()
            )
        # –∑–∞–ø–∏—Å—å/–æ—Ç–º–µ–Ω–∞ —É—á–∞—Å—Ç–∏—è –Ω–∞ –∫—É—Ä—Å–µ
        elif event.payload.get('entry'):
            course_pk = event.payload.get('entry')
            course = await Course.objects.async_get(pk=course_pk)
            if event.payload.get('cancel'):
                text = f'''
                     {user_info['first_name']}, –≤—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –∫—É—Ä—Å: {course.name}.
                     –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—è–≤–∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π —à–∫–æ–ª–µ.
                     –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Å–Ω–æ–≤–∞ –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å.
                     '''
                await event.answer(
                    message=dedent(text),
                    keyboard=await get_button_menu()
                )
                await sync_to_async(course.clients.remove)(user_instance)
                await sync_to_async(course.save)()
            else:
                await storage.put(Key(f'{user_id}_current_course'), course)
                if user_instance.phone_number:
                    text = f'''
                        –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
                        {user_instance.phone_number}                        
                        '''
                    await event.answer(
                        message=dedent(text),
                        keyboard=await check_phone_button()
                    )
                else:
                    text = f'''
                         {user_info['first_name']}, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.                         
                         '''
                    await event.answer(
                        message=dedent(text),
                        keyboard=await get_button_menu()
                    )
                return 'PHONE'
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif event.text:
        msg = event.text
        vk_profile = user_instance.vk_profile
        admin_msg = f'''
        –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {vk_profile} –≤ —á–∞—Ç–µ https://vk.com/gim{settings.VK_GROUP_ID}:
        "{msg}"
        '''
        user_msg = f'''
        –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏!
        '''
        await api.messages.send(
            random_id=random.randint(0, 1000),
            user_ids=settings.ADMIN_IDS,
            message=admin_msg
        )
        await event.answer(
            message=user_msg,
            keyboard=await get_button_menu()
        )

    return 'MAIN_MENU'


async def handle_course_info(event: SimpleBotEvent):
    api = event.api_ctx
    user_id = event.user_id
    user_instance = await Client.objects.async_get(vk_id=user_id)
    if event.payload and event.payload.get('course_pk'):
        course_pk = event.payload['course_pk']
        course = await Course.objects.async_get(pk=course_pk)
        course_date = await sync_to_async(course.scheduled_at.strftime)("%d.%m.%Y")
        course_images = await sync_to_async(course.images.all)()
        attachment = None

        if await sync_to_async(bool)(course_images):
            random_image = await sync_to_async(random.choice)(course_images)
            if not random_image.image_vk_id:
                await save_image_vk_id(random_image)
            else:
                attachment = random_image.image_vk_id

        text = f'''            
            {course.name.upper()}:
            
            –î–∞—Ç–∞: {course_date}
            –ü—Ä–æ–≥—Ä–∞–º–º–∞: {await sync_to_async(lambda: course.program)()}
            –õ–µ–∫—Ç–æ—Ä: {await sync_to_async(lambda: course.lecture)()}            
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {course.duration} –¥.
            '''
        program_text = f'''
            –û –ü–†–û–ì–†–ê–ú–ú–ï –ö–£–†–°–ê:
            {await sync_to_async(lambda: course.program.short_description)()}
            '''
        description_text = f'''
            –°–û–î–ï–†–ñ–ê–ù–ò–ï –ö–£–†–°–ê:
            {await sync_to_async(lambda: course.short_description)()}
            '''

        await event.answer(
            message=dedent(text),
            attachment=attachment
        )
        if description_text:
            await event.answer(
                message=dedent(program_text)
            )
            await event.answer(
                message=dedent(description_text),
                keyboard=await get_button_course_menu(
                    back=event.payload['button'], course_pk=course_pk, user_id=user_id
                )
            )
        else:
            await event.answer(
                message=dedent(program_text),
                keyboard=await get_button_course_menu(
                    back=event.payload['button'], course_pk=course_pk, user_id=user_id
                )
            )

    return 'MAIN_MENU'


async def enter_phone(event: SimpleBotEvent):
    user_id = event.user_id
    user_instance = await Client.objects.async_get(vk_id=user_id)
    course = await storage.get(Key(f'{user_id}_current_course'))
    user_info = {
        'first_name': await storage.get(Key(f'{user_id}_first_name')),
        'last_name': await storage.get(Key(f'{user_id}_last_name'))
    }
    # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if event.payload and event.payload.get('check_phone'):
        if event.payload['check_phone'] == 'true':
            await entry_user_to_course(event, user_info, user_instance, course)
            await storage.delete(Key(f'{user_id}_current_course'))
            return 'MAIN_MENU'
        # –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–∞—Ö–æ—Ç–µ–ª —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä
        else:
            text = f'''
                 {user_info['first_name']}, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å, —É–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.                         
                 '''
            await event.answer(
                message=dedent(text),
                keyboard=await get_button_menu()
            )
            return 'PHONE'
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    else:
        phone = event.text
        pattern = re.compile(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$')
        if pattern.findall(phone):
            await storage.delete(Key(f'{user_id}_current_course'))
            norm_phone = ''.join(['+7'] + [i for i in phone if i.isdigit()][-10:])
            await storage.put(Key(f'{user_id}_phone'), norm_phone)
            await entry_user_to_course(event, user_info, user_instance, course)
            return 'MAIN_MENU'
        else:
            text = '''
            –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
            –õ–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é
            '''
            await event.answer(
                message=dedent(text),
                keyboard=await get_button_menu()
            )
            return 'PHONE'
